"""
Exemple d'utilisation des messages personnalis√©s dans le workflow
"""

from src.utils.custom_messages import ReviewerMessage, ArchitectMessage, GDPRMessage, AgentMessage, MetricMessage
from langchain_core.messages import HumanMessage, AIMessage, SystemMessage
from typing import List, BaseMessage
import time


def exemple_workflow_avec_messages_personnalises():
    """D√©montre l'utilisation des messages personnalis√©s"""
    
    # 1. Message initial de l'utilisateur
    user_message = HumanMessage(
        content="Je veux cr√©er une application de e-commerce avec gestion des donn√©es personnelles"
    )
    
    # 2. R√©ponse de l'architecte avec m√©tadonn√©es sp√©cialis√©es
    start_time = time.time()
    architect_response = ArchitectMessage(
        content="Voici l'architecture recommand√©e pour votre application e-commerce...",
        architecture_type="hexagonale",
        technologies=["React", "Node.js", "PostgreSQL", "Redis"],
        complexity_level="√©lev√©e",
        processing_time=time.time() - start_time
    )
    
    # 3. Analyse GDPR avec informations sp√©cialis√©es
    gdpr_analysis = GDPRMessage(
        content="Analyse de conformit√© GDPR pour l'application e-commerce...",
        compliance_level="partiellement conforme",
        identified_risks=[
            "Stockage des donn√©es de paiement",
            "Cookies de tracking",
            "Partage avec partenaires"
        ],
        recommendations=[
            "Impl√©menter l'anonymisation",
            "Ajouter gestion des consentements",
            "Cr√©er API pour droit √† l'effacement"
        ]
    )
    
    # 4. R√©vision avec note et commentaires
    review_message = ReviewerMessage(
        content="L'architecture propos√©e est solide mais n√©cessite quelques am√©liorations...",
        note=75,
        reviewer_name="Expert S√©nior",
    )
    
    # 5. Message d'agent avec m√©triques
    agent_response = AgentMessage(
        content="Analyse termin√©e avec succ√®s",
        agent_name="GlobalWorkflowAgent",
        agent_version="2.1",
        processing_time=2.345,
        confidence_score=0.87
    )
    
    # 6. M√©triques de performance
    metrics = MetricMessage(
        content="Rapport de performance du workflow",
        tokens_used=1250,
        cost_estimate=0.0125,
        response_quality="excellent"
    )
    
    # Affichage des messages avec leurs repr√©sentations personnalis√©es
    messages = [
        user_message,
        architect_response,
        gdpr_analysis,
        review_message,
        agent_response,
        metrics
    ]
    
    print("=== EXEMPLE D'UTILISATION DES MESSAGES PERSONNALIS√âS ===\n")
    
    for i, message in enumerate(messages, 1):
        print(f"üìù MESSAGE {i} ({message.type.upper()})")
        print(message.pretty_repr())
        print("\n" + "="*60 + "\n")


def integration_avec_workflow_existant():
    """Montre comment int√©grer les messages personnalis√©s dans le workflow existant"""
    
    # Simulation d'une r√©ponse d'architecte am√©lior√©e
    def architect_node_ameliore(state):
        # Logique existante...
        response_content = "Architecture hexagonale recommand√©e..."
        
        # Cr√©ation d'un message personnalis√© au lieu d'AIMessage
        architect_message = ArchitectMessage(
            content=response_content,
            architecture_type="hexagonale",
            technologies=["FastAPI", "PostgreSQL", "Redis", "React"],
            complexity_level="moyenne"
        )
        
        return {"messages": [architect_message]}
    
    # Simulation d'une r√©vision am√©lior√©e
    def review_node_ameliore(state):
        # Logique existante de r√©vision...
        note = 85
        comment = "Excellente architecture, quelques am√©liorations mineures sugg√©r√©es"
        
        # Message de r√©vision personnalis√©
        review_message = ReviewerMessage(
            content=comment,
            note=note,
            reviewer_name="ArchitectReviewer"
        )
        
        return {"messages": [review_message], "note": note}
    
    print("=== INT√âGRATION DANS LE WORKFLOW EXISTANT ===\n")
    print("Les messages personnalis√©s peuvent remplacer les AIMessage standard")
    print("tout en conservant la compatibilit√© avec LangGraph.\n")


def avantages_messages_personnalises():
    """Explique les avantages des messages personnalis√©s"""
    
    print("=== AVANTAGES DES MESSAGES PERSONNALIS√âS ===\n")
    
    avantages = [
        "üéØ **Typage fort** : Chaque type de message a ses propres propri√©t√©s",
        "üìä **M√©tadonn√©es riches** : Stockage d'informations contextuelles",
        "üîç **Tra√ßabilit√©** : Suivi d√©taill√© des √©tapes du workflow",
        "üìù **Debugging facilit√©** : Repr√©sentations visuelles am√©lior√©es",
        "üîß **Extensibilit√©** : Ajout facile de nouvelles propri√©t√©s",
        "üìà **M√©triques** : Collecte automatique de donn√©es de performance",
        "üé® **Personnalisation** : Affichage adapt√© √† chaque type de message"
    ]
    
    for avantage in avantages:
        print(avantage)
    
    print("\n=== COMPATIBILIT√â ===")
    print("‚úÖ Compatible avec tous les outils LangChain existants")
    print("‚úÖ Fonctionne avec LangGraph sans modification")
    print("‚úÖ Supporte la s√©rialisation/d√©s√©rialisation")
    print("‚úÖ Int√©gration transparente avec les LLMs")


if __name__ == "__main__":
    exemple_workflow_avec_messages_personnalises()
    integration_avec_workflow_existant()
    avantages_messages_personnalises() 